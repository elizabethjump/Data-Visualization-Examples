[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "chart-small-multiples.html",
    "href": "chart-small-multiples.html",
    "title": "Small multiples",
    "section": "",
    "text": "library(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\n\nWarning: package 'gridExtra' was built under R version 4.3.1\n\n\n\nAttaching package: 'gridExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nlibrary(ggtext)\n\nWarning: package 'ggtext' was built under R version 4.3.1\n\n# load data ------------------------------------\n## dof P3 ----\ndof &lt;- read.csv(\"J:/Epi Data/DoF Population Projections/P3_Complete released on 7.14.2021/P3_Complete.csv\")\n\n## get what we want\ndof1 &lt;- dof %&gt;%\n  rename(age = agerc) %&gt;%\n  filter(fips == \"6081\") %&gt;%\n  mutate(sex = str_to_title(sex),\n         race_cat = case_when(race7 == 1 ~ \"White\",\n                              race7 == 2 ~ \"Black\",\n                              race7 == 3 ~ \"American Indian/Alaskan Native\",\n                              race7 == 4 ~ \"Asian\",\n                              race7 == 5 ~ \"Native Hawaiian/Pacific Islander\",\n                              race7 == 6 ~ \"Multirace\",\n                              race7 == 7 ~ \"Latinx\")) %&gt;%\n  group_by(year, sex, race_cat) %&gt;%\n  summarize(pop = sum(perwt),\n            .groups = \"keep\") %&gt;%\n  ungroup() %&gt;%\n  group_by(year, race_cat) %&gt;%\n  mutate(total = sum(pop)) %&gt;%\n  rowwise() %&gt;%\n  mutate(prop = round(pop/total, 5)) %&gt;%\n  ungroup() \n\n\n# visualize -------------------------------------\n## goal: see how the population changed over time ----\n### set the colors ----\nmale_color &lt;- \"#ffce00\"\nfemale_color &lt;- \"#006cb6\"\n\n### make the plot ----\nplot &lt;- ggplot(dof1) +\n  geom_line(aes(x = year, y = prop, group = sex, color = sex), \n            size = 1.5) + \n  scale_color_manual(values = c(\"Female\" = female_color,\n                               \"Male\" = male_color)) + \n  facet_wrap(~race_cat,\n             nrow = 2) + \n  scale_y_continuous(\n    labels = scales::percent,\n    breaks = 0.5,\n  ) + \n  theme_minimal() + \n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(size = 0.001, color = \"black\"),\n    axis.title = element_blank(),\n    axis.text = element_text(face = \"bold\"),\n    axis.text.x = element_text(size = 10),\n    strip.text.x = element_text(size = 11, face = \"bold\"),\n    legend.position = \"top\",\n    panel.background = element_rect(fill = \"#F8F9F9\", \n                                    color = \"#F8F9F9\")\n    \n  ) \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n### make the title ----\nplot_title &lt;- grobTree(\n  gp = gpar(fontsize = 14, fontface = \"bold\"), \n  textGrob(label = \"Projected percentage of  \", \n           name = \"first_part\",\n           x = unit(0.2, \"lines\"), \n           y = unit(0.5, \"lines\"), \n           hjust = 0, \n           vjust = 0),\n  textGrob(label = \"Female\", \n           name = \"female\",\n           x = grobWidth(\"first_part\") + unit(0.2, \"lines\"), \n           y = unit(0.5, \"lines\"),\n           hjust = 0, \n           vjust = 0, \n           gp = gpar(col = female_color)),\n  textGrob(label = \" and \", \n           name = \"second_part\",\n           x = grobWidth(\"first_part\") + grobWidth(\"female\") + unit(0.2, \"lines\"), \n           y = unit(0.5, \"lines\"),\n           hjust = 0, \n           vjust = 0),\n  textGrob(label = \"Male\", \n           name = \"male\",\n           x = grobWidth(\"first_part\") + grobWidth(\"female\") + grobWidth(\"second_part\") + unit(0.2, \"lines\"), \n           y = unit(0.5, \"lines\"),\n           hjust = 0, \n           vjust = 0, \n           gp = gpar(col = male_color)),\n  textGrob(label = \" residents by race/ethnicity.\", \n           name = \"last_part\",\n           x = grobWidth(\"first_part\") + grobWidth(\"female\") + grobWidth(\"second_part\") + grobWidth(\"male\") + unit(0.2, \"lines\"), \n           y = unit(0.5, \"lines\"),\n           hjust = 0, \n           vjust = 0)\n  )\n  \n## put it all together ----\ncombined_plot &lt;- arrangeGrob(plot, top=plot_title, padding = unit(2.6, \"line\"))\n  \ngrid.arrange(combined_plot)"
  },
  {
    "objectID": "chart_bar.html",
    "href": "chart_bar.html",
    "title": "Bar charts",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\nlibrary(grid)\nlibrary(gridExtra)\n\nWarning: package 'gridExtra' was built under R version 4.3.1\n\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n# load data ----------------------------------\ndata(\"HairEyeColor\")\n\n## get it in the format we need ----\nhair_eye_freq &lt;- HairEyeColor %&gt;%\n  data.frame() %&gt;%\n  group_by(Hair, Eye) %&gt;%\n  summarize(freq = sum(Freq),\n            .groups = \"keep\") %&gt;%\n  ungroup() %&gt;%\n  group_by(Hair) %&gt;%\n  mutate(total = sum(freq),\n         prop = freq/total) %&gt;%\n  ungroup() \n\nprint(hair_eye_freq)\n\n# A tibble: 16 × 5\n   Hair  Eye    freq total   prop\n   &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 Black Brown    68   108 0.630 \n 2 Black Blue     20   108 0.185 \n 3 Black Hazel    15   108 0.139 \n 4 Black Green     5   108 0.0463\n 5 Brown Brown   119   286 0.416 \n 6 Brown Blue     84   286 0.294 \n 7 Brown Hazel    54   286 0.189 \n 8 Brown Green    29   286 0.101 \n 9 Red   Brown    26    71 0.366 \n10 Red   Blue     17    71 0.239 \n11 Red   Hazel    14    71 0.197 \n12 Red   Green    14    71 0.197 \n13 Blond Brown     7   127 0.0551\n14 Blond Blue     94   127 0.740 \n15 Blond Hazel    10   127 0.0787\n16 Blond Green    16   127 0.126 \n\n\n\n# make bar charts ----------------------------\n## basics ----\n### clustered ----\nhair_eye_freq %&gt;% \n  ggplot(aes(x = Hair, \n             y = prop,\n             fill = Eye)) +\n  geom_bar(position = \"dodge\",\n           stat = \"identity\")\n\n\n\n### stacked ----\nhair_eye_freq %&gt;% \n  ggplot(aes(x = Hair, \n             y = freq,\n             fill = Eye)) +\n  geom_bar(position = \"stack\",\n           stat = \"identity\") \n\n\n\n### 100% stacked ----\nhair_eye_freq %&gt;% \n  ggplot(aes(x = Hair, \n             y = freq,\n             fill = Eye)) +\n  geom_bar(position = \"fill\",\n           stat = \"identity\")\n\n\n\n\n\n## with all the formating ----\nhair_eye_freq %&gt;% \n  ggplot(aes(x = Hair, \n             y = prop,\n             fill = Eye)) +\n  geom_bar(position = \"dodge\",\n           stat = \"identity\") + \n  scale_fill_manual(values = c(\"Brown\" = \"#873600\",\n                               \"Blue\" = \"#0288D1\",\n                               \"Hazel\" = \"#CFD8DC\",\n                               \"Green\" = \"#7CB342\"),\n                    name = \"Eye Color\") + \n  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +\n  theme_minimal() + \n  theme(\n    legend.position = \"bottom\",\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(size = 0.25, color = \"gray\"),\n    axis.title = element_blank(),\n    axis.text = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\"),\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 10)\n  ) + \n  labs(title = \"Distribution of Eye Color by Hair Color\") +\n  xlab(\"Hair Color\") \n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n## formatting specific elements ----------\neye_overall &lt;- hair_eye_freq %&gt;%\n  select(Eye, freq) %&gt;%\n  group_by(Eye) %&gt;%\n  summarize(freq_eye = sum(freq),\n            .groups = \"keep\") %&gt;%\n  ungroup()\n\n### setting all bars to the same color with an outline ----\neye_overall %&gt;%\n  ggplot(aes(x = Eye, \n             y = freq_eye)) +\n  geom_bar(position = \"dodge\",\n           stat = \"identity\",\n           fill = \"#38939b\",\n           color = \"black\")  \n\n\n\n### fill by frequency ----\neye_overall %&gt;%\n  ggplot(aes(x = Eye, \n             y = freq_eye,\n             fill = freq_eye)) +\n  geom_bar(position = \"dodge\",\n           stat = \"identity\") + \n  scale_fill_gradient(low = \"white\", high = \"#006cb6\")\n\n\n\n### fill with a palette ----\neye_overall %&gt;%\n  ggplot(aes(x = Eye, \n             y = freq_eye,\n             fill = Eye)) +\n  geom_bar(position = \"dodge\",\n           stat = \"identity\") + \n  scale_fill_brewer(palette = \"Spectral\")\n\n\n\n### color based on values ---- \nhair_eye_freq %&gt;%\n  mutate(maj = case_when(prop &gt; 0.5 ~ \"majority\",\n                         TRUE ~ \"minority\")) %&gt;%\n  ggplot(aes(x = Hair, \n             y = prop,\n             group = Eye,\n             fill = maj)) +\n  geom_bar(position = \"dodge\",\n           stat = \"identity\",\n           color = \"black\") +\n  scale_fill_manual(values = c(\"majority\" = \"#0288D1\",\n                               \"minority\" = \"#CFD8DC\")) + \n  labs(title = \"Frequency of Eye Color by Hair Color\") + \n  theme(legend.title = element_blank())"
  },
  {
    "objectID": "chart_beeswarm.html",
    "href": "chart_beeswarm.html",
    "title": "Beeswarm Plots",
    "section": "",
    "text": "This code was adapted from Stephanie Evergreen’s Code for Beeswarm Plots. This article goes over the motivation for using a beeswarm plot in detail. The gist is that these are great charts when you want to compare a continuous variable across multiple categories."
  },
  {
    "objectID": "chart_beeswarm.html#beeswarm-plot",
    "href": "chart_beeswarm.html#beeswarm-plot",
    "title": "Beeswarm Plots",
    "section": "",
    "text": "This code was adapted from Stephanie Evergreen’s Code for Beeswarm Plots. This article goes over the motivation for using a beeswarm plot in detail. The gist is that these are great charts when you want to compare a continuous variable across multiple categories."
  },
  {
    "objectID": "chart_beeswarm.html#example-code",
    "href": "chart_beeswarm.html#example-code",
    "title": "Beeswarm Plots",
    "section": "Example code",
    "text": "Example code\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\nlibrary(grid)\nlibrary(gridExtra)\n\nWarning: package 'gridExtra' was built under R version 4.3.1\n\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n# load data ----\ndata(iris)\n\nMake a vertical beeswarm plot:\n\n# vertical beeswarm ----\n## make plot ----\nplot_vert &lt;- iris %&gt;% \n  ggplot(aes(x = Species, \n             y = Sepal.Length)) +\n  geom_point(\n    position = position_jitter(w = 1/6, h = 0),\n    size = 4, \n    color = \"#006cb6\", \n    alpha = 2/3\n  ) +\n  scale_y_continuous(\n    limits = c(4, 8),\n    breaks = seq(4, 8, 2)\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(size = 0.25, color = \"gray\"),\n    axis.title = element_blank(),\n    axis.text = element_text(face = \"bold\"),\n    axis.text.x = element_text(size = 12)\n  ) \n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\nplot_vert\n\n\n\n\nAdd a title and some formatting to the vertical plot\n\nplot_title &lt;- textGrob(\n  label = \"Sepal Length of Iris Species\",\n  x = unit(0.2, \"lines\"), \n  y = unit(0.1, \"lines\"), \n  hjust = 0, \n  vjust = 0, \n  gp = gpar(fontsize = 18)\n)\n\nplot_complete &lt;- arrangeGrob(plot_vert, top = plot_title)\ngrid.arrange(plot_complete)\n\n\n\n\nMake a horizontal beeswarm plot Note: this is basically the same code as the vertical chart but the x and y variables are switched.\n\nplot_horiz &lt;- iris %&gt;% \n  ggplot(aes(x = Sepal.Length, \n             y = Species)) +\n  geom_point(\n    position = position_jitter(h = 1/6, w = 0),\n    size = 4, \n    color = \"#006cb6\", \n    alpha = 2/3\n  ) +\n  scale_x_continuous(\n    limits = c(4, 8),\n    breaks = seq(4, 8, 2)\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(size = 0.25, color = \"gray\"),\n    axis.title = element_blank(),\n    axis.text = element_text(face = \"bold\"),\n    axis.text.y = element_text(size = 12)\n  ) + \n  labs(title = \"Sepal Length of Iris Species\")\nplot_horiz\n\n\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data-Visuzaliation-Examples",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  }
]